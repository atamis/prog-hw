# Boolean negation
deffun not(bool)
  if bool then false else true
in

# Modulus. Only works with non-negative dividends and positive divisors
deffun mod(dividend, divisor)
  while (not(<(dividend, divisor))) {
    dividend -= divisor;
  };
  dividend;
in

# Division. Only works with non-negative dividends and positive divisors
deffun div(dividend, divisor)
  defvar result = 0 in {
    while (not(<(dividend, divisor))) {
      dividend -= divisor;
      result++;
    };
    result;
  }
in

# A function converting integers to strings (in base 10)
deffun int_to_string(x)
  if <(x, 0) then
    +("-", int_to_string(-(0,x)))
  else if ==(x, 0) then "0"
  else if ==(x, 1) then "1"
  else if ==(x, 2) then "2"
  else if ==(x, 3) then "3"
  else if ==(x, 4) then "4"
  else if ==(x, 5) then "5"
  else if ==(x, 6) then "6"
  else if ==(x, 7) then "7"
  else if ==(x, 8) then "8"
  else if ==(x, 9) then "9"
  else +(int_to_string(div(x, 10)), int_to_string(mod(x, 10)))
in {
  print(int_to_string(-(0, 123)));
  print("\n");
  print(int_to_string(42));
  "";
}
